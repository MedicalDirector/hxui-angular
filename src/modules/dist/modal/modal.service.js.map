{"version":3,"file":"modal.service.js","sourceRoot":"","sources":["../../modal/modal.service.ts"],"names":[],"mappings":"AAAA,OAAO,EACH,gBAAgB,EAChB,kBAAkB,EAAE,UAAU,EAAE,QAAQ,EAAE,YAAY,EACtD,wBAAwB,EAC3B,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,UAAU,EAAE,aAAa,EAAC,MAAM,SAAS,CAAC;AAClD,OAAO,EAAC,sBAAsB,EAAC,MAAM,4BAA4B,CAAC;;IAW9D,sBAAoB,wBAAkD;QAAlD,6BAAwB,GAAxB,wBAAwB,CAA0B;KACrE;IAED,+CAAwB,GAAxB,UAAyB,KAAuB;QAC5C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACtB;IAED,uCAAgB,GAAhB,UAAiB,QAAkB;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC5B;IAED;;;;;OAKG;;;;;;;IACH,6BAAM;;;;;;IAAN,UAAU,SAAc,EAAE,UAAmB;;QAEzC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAyB,sBAAsB,CAAC,CAAC;;QAG/F,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAI,SAAS,EAAE,UAAU,CAAC,CAAC;KAChE;IAID;;;;;OAKG;;;;;;;IACK,6CAAsB;;;;;;IAA9B,UAAkC,SAAc,EAAE,UAAmB;QAArE,iBAoBC;;;QAjBG,IAAM,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;;;QAGjF,IAAM,aAAa,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;;QAE7E,IAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,EAAE,aAAa,CAAC,CAAC;;QAE3E,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;;QAEjD,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG;;YAE/B,AADA,+BAA+B;YAC/B,KAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;;YAE3B,YAAY,CAAC,OAAO,EAAE,CAAC;SAC1B,CAAC;QAEF,MAAM,CAAC,YAAY,CAAC;KACvB;;gBA9DJ,UAAU;;;;gBALP,wBAAwB;;uBAH5B;;SASa,YAAY","sourcesContent":["import {\n    ViewContainerRef,\n    ReflectiveInjector, Injectable, Injector, ComponentRef,\n    ComponentFactoryResolver\n} from '@angular/core';\nimport {Observable, ReplaySubject} from 'rxjs/Rx';\nimport {ModalBackdropComponent} from './modal-backdrop.component';\n\n@Injectable()\nexport class ModalService {\n    // here we hold our placeholder\n    private vcRef: ViewContainerRef;\n    // here we hold our injector\n    private injector: Injector;\n    // here we hold the backdrop component\n    private backdropRef: ComponentRef<ModalBackdropComponent>;\n\n    constructor(private componentFactoryResolver: ComponentFactoryResolver) {\n    }\n\n    registerViewContainerRef(vcRef: ViewContainerRef): void {\n        this.vcRef = vcRef;\n    }\n\n    registerInjector(injector: Injector): void {\n        this.injector = injector;\n    }\n\n    /**\n     * Create component dynamically\n     * @param component\n     * @param parameters\n     * @returns {ReplaySubject}\n     */\n    create<T>(component: any, parameters?: Object): ComponentRef<T> {\n        //create backdrop\n        this.backdropRef = this.dynamicComponentLoader<ModalBackdropComponent>(ModalBackdropComponent);\n\n        //create dynamic component\n        return this.dynamicComponentLoader<T>(component, parameters);\n    }\n\n\n\n    /**\n     * Load dynamic component and return componentRef\n     * @param component\n     * @param parameters\n     * @returns {ComponentRef}\n     */\n    private dynamicComponentLoader<T>(component: any, parameters?: Object): ComponentRef<any>{\n        // compile the component based on its type and\n        // create a component factory\n        const factory = this.componentFactoryResolver.resolveComponentFactory(component);\n        // the injector will be needed for DI in\n        // the custom component\n        const childInjector = ReflectiveInjector.resolveAndCreate([], this.injector);\n        // create the actual component\n        const componentRef = this.vcRef.createComponent(factory, 0, childInjector);\n        // pass the @Input parameters to the instance\n        Object.assign(componentRef.instance, parameters);\n        // add a destroy method to the modal instance\n        componentRef.instance['destroy'] = () => {\n            // this will close the backdrop\n            this.backdropRef.destroy();\n            // this will destroy the component\n            componentRef.destroy();\n        };\n\n        return componentRef;\n    }\n\n}\n\n"]}