{"version":3,"file":"simple-search.pipe.js","sourceRoot":"","sources":["../../../utils/pipes/simple-search.pipe.ts"],"names":[],"mappings":";;;;AAKA,OAAO,EAAC,IAAI,EAAE,aAAa,EAAC,MAAM,eAAe,CAAC;;IAa9C;2BAEqB,UAAC,IAAS,EAAE,UAAuB;YAAvB,2BAAA,EAAA,eAAuB;YAEpD,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC/B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAC/C,CAAC;gBACG,IAAI,KAAK,GAAG,KAAK,EACb,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAElC,EAAE,CAAC,CAAC,aAAa,CAAC;oBACd,KAAK,GAAG,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAE5F,EAAE,CAAC,CAAC,KAAK,IAAI,UAAU,IAAI,EAAE,CAAC;oBAC1B,MAAM,CAAC,IAAI,CAAC;aACnB;YAED,MAAM,CAAC,KAAK,CAAC;SAChB;KAlBc;IAoBf,oCAAS,GAAT,UAAU,KAAY,EAAE,IAAW;QAAnC,iBAMC;QAJG,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;;QAGxC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAvD,CAAuD,CAAC,CAAC;KACxF;;gBAjCJ,IAAI,SAAC;oBACF,IAAI,EAAE,cAAc;oBACpB,IAAI,EAAE,KAAK;iBACd;;;;2BAdD;;SAgBa,gBAAgB","sourcesContent":["/**\n * Example use\n * Array of objects: *ngFor=\"#row of rows | simpleSearch : 'the search term'\"\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\nexport interface ISimpleSearchPipe extends PipeTransform {\n    searchValue(item: any, searchTerm: string): boolean;\n}\n\n@Pipe({\n    name: 'simpleSearch',\n    pure: false\n})\n\nexport class SimpleSearchPipe implements ISimpleSearchPipe{\n\n    constructor(){}\n\n    public searchValue = (item: any, searchTerm: string = ''): boolean =>\n    {\n        const keys = Object.keys(item);\n        for (let i = 0, len = keys.length; i < len; i++)\n        {\n            let match = false,\n                propertyValue = item[keys[i]];\n\n            if (propertyValue)\n                match = (propertyValue.toString().toLowerCase().indexOf(searchTerm.toLowerCase()) > -1);\n\n            if (match || searchTerm == '')\n                return true;\n        }\n\n        return false;\n    }\n\n    transform(items: any[], args: any[]): any\n    {\n        if (!Array.isArray(items)) return items;\n\n        // filter items array, items which match and return true will be kept, false will be filtered out\n        return items.filter(item => (args) ? this.searchValue(item, args.toString()) : item);\n    }\n}\n"]}