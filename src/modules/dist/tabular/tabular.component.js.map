{"version":3,"file":"tabular.component.js","sourceRoot":"","sources":["../../tabular/tabular.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,OAAO,EACxD,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,aAAa,EAAC,MAAM,WAAW,CAAC;AACxC,OAAO,EAAC,cAAc,EAAC,MAAM,4BAA4B,CAAC;AAC1D,OAAO,EAAC,cAAc,EAAC,MAAM,4BAA4B,CAAC;AAC1D,OAAO,EAAC,qBAAqB,EAAE,gBAAgB,EAAC,MAAM,4BAA4B,CAAC;AACnF,OAAO,EAAC,aAAa,EAAC,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAC,WAAW,EAAC,MAAM,qBAAqB,CAAC;;IAqF9C,0BAA2B,IAAmB,EACnB,cAAqC;QADhE,iBAGC;QAH0B,SAAI,GAAJ,IAAI,CAAe;QACnB,mBAAc,GAAd,cAAc,CAAuB;;;;;;uBApBrB,IAAI,YAAY,EAAW;8BAG9B,CAAC,IAAI,CAAC;yBAG1B,KAAK;;;;;;uBAUO,IAAI,CAAC,cAAc;+BAyCzB;YACxB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC1C,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,KAAI,CAAC,SAAS,CAAC;aACxC;SACF;sCAGgC;YAC/B,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC1C,EAAE,CAAC,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC1B,KAAK,EAAE,CAAC;iBACT;aACF;YACD,KAAI,CAAC,SAAS,GAAG,CAAC,KAAI,CAAC,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC;SAC/C;QAnDC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KAC3B;0BAvDU,oCAAM;;;;;;YACf,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;;aAEtB,UAAkB,CAAiB;YACjC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;SAClB;;;;0BAIU,sCAAQ;;;YACjB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;;aAExB,UAAoB,EAAY;YAC9B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;SACrB;;;;0BAOU,wCAAU;;;;;;YACnB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;;aAE1B,UAAsB,IAAY;YAChC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;SACzB;;;;IA+BD,mCAAQ,GAAR;KACC;IAED,oCAAS,GAAT;QACE,IAAI,CAAC,OAAO,EAAE,CAAC;KAChB;IAED,sBAAY,2CAAa;aAAzB;YACE,MAAM,CAAC,CAAC,IAAI,CAAC,uBAAuB,KAAK,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,gBAAgB,CAAC;SAC3G;;;OAAA;IAED;;;;;OAKG;;;;;;;IACK,0CAAe;;;;;;IAAvB,UAAwB,KAAY,EAAE,EAAS;QAC7C,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;YACd,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;;gBACpB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;aACT;YAAC,IAAI,CAAC,CAAC;;gBACN,IAAM,IAAI,GAAU,EAAE,CAAC;gBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACnC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;iBAClB;gBACD,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACzB;SACF;QACD,MAAM,CAAC,KAAK,CAAC;KACd;IAqBD,kCAAO,GAAP,UAAQ,MAGP;QAHO,uBAAA,EAAA;YACN,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW;YACxC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY;SAClD;QACC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC;;QAGjD,IAAM,UAAU,GAAW,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC;QAC1G,IAAM,QAAQ,GAAW,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY,GAAG,CAAC,EAAE,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;QAEjH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;KAC7D;IAGD;;;;SAIK;;;;;;IACG,2CAAgB;;;;;IAAxB,UAAyB,MAAsB;QAC7C,MAAM,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;KAC/E;IAGO,iDAAsB,GAA9B,UAA+B,MAAsB;QACnD,MAAM,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC;KACnF;IAGD;;;OAGG;;;;;IACK,6CAAkB;;;;IAA1B,UAA2B,GAAW;QACpC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACtE,IAAI,CAAC,WAAW,EAAE,CAAC;KACpB;IAID;;;;;OAKG;;;;;;;IACK,sCAAW;;;;;;IAAnB;QACE,IAAI,SAAiB,CAAC;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,uBAAuB,KAAK,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;YAChE,SAAS,GAAG,GAAG,CAAC;YAChB,IAAI,CAAC,uBAAuB,GAAG,gBAAgB,CAAC,UAAU,CAAC;SAC5D;QAAC,IAAI,CAAC,CAAC;YACN,SAAS,GAAG,GAAG,CAAC;YAChB,IAAI,CAAC,uBAAuB,GAAG,gBAAgB,CAAC,SAAS,CAAC;SAC3D;QAED,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1E,IAAI,CAAC,OAAO,EAAE,CAAC;KAChB;IAGD,sBAAI,4CAAc;aAAlB;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;SACzB;;;OAAA;IAGD;;;OAGG;;;;;IACK,kCAAO;;;;IAAf;QACE,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,WAAW,CAAC,KAAK,CAAC,CAAC;KACjD;;gBAlNF,SAAS,SAAC;oBACT,QAAQ,EAAE,YAAY;oBACtB,WAAW,EAAE,oBAAoB;oBACjC,MAAM,EAAE;wBACN,kFAAkF;wBAClF,iCAAiC;wBACjC,mEAAmE;qBACpE;iBACF;;;;gBAZO,aAAa;gBADb,qBAAqB;;;4BAqB1B,KAAK;yBAMJ,KAAK;2BAON,KAAK;6BASL,KAAK;+BAYL,KAAK;4BAaL,MAAM;;2BA1ET;;SAsBa,gBAAgB","sourcesContent":["import {\r\n  Component, Input, Output, EventEmitter, OnInit, DoCheck\r\n} from '@angular/core';\r\nimport {TabularColumn} from './tabular';\r\nimport {ITabularConfig} from './tabular-config.interface';\r\nimport {IActionsConfig} from './actions-config.interface';\r\nimport {TabularOrderByService, OrderByDirection} from './tabular-order-by.service';\r\nimport {TabularConfig} from './tabular.config';\r\nimport {TabularSize} from './tabular-size.enum';\r\n\r\n\r\n@Component({\r\n  selector: 'hx-tabular',\r\n  templateUrl: './tabular.tpl.html',\r\n  styles: [\r\n    '.tabular__sorter{position:relative;cursor:pointer} th .icon{position: absolute;}',\r\n    '.tabular__checkboxes{width:2%;}',\r\n    '.tabular__checkboxes .hx-checkbox-control{margin:0;display:flex;}'\r\n  ]\r\n})\r\n\r\n\r\nexport class TabularComponent implements OnInit, DoCheck {\r\n\r\n  /**\r\n   * Collection of column models\r\n   */\r\n  @Input() columns: Array<TabularColumn>;\r\n\r\n  /**\r\n   * Collection of data rows\r\n   */\r\n  // todo - this is not strict. should it be when it's dynamic?.\r\n   @Input() rows: Array<any>;\r\n\r\n\r\n  /**\r\n   * Tabular configuration\r\n   * IPaginationInstance, ISearchConfig\r\n   */\r\n  @Input()\r\n  public get config(): ITabularConfig  {\r\n    return this._config;\r\n  }\r\n  public set config(c: ITabularConfig)  {\r\n    this._config = c;\r\n  }\r\n\r\n  /** The function to call when a action item is clicked **/\r\n  @Input()\r\n  public get callback(): Function{\r\n    return this._callback;\r\n  }\r\n  public set callback(Fn: Function){\r\n    this._callback = Fn;\r\n  }\r\n\r\n  /**\r\n   * Search term is used in the simple search pipe\r\n   * Array of objects: *ngFor=\"#row of rows | simpleSearch : 'the search term'\"\r\n   */\r\n  @Input()\r\n  public get searchTerm(): string{\r\n    return this._searchTerm;\r\n  }\r\n  public set searchTerm(term: string){\r\n    this._searchTerm = term;\r\n  }\r\n\r\n  /**\r\n   * Event fired when refresh is called.\r\n   * Host should refresh data of input.\r\n   * @type {EventEmitter<any>}\r\n   */\r\n  @Output() refresh: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n\r\n  private defaultOrderBy: Array<string> = ['id'];\r\n  private defaultOrderByDirection: OrderByDirection;\r\n  pagedItems: any[];\r\n  private selectAll = false;\r\n  protected _callback: Function;\r\n  protected _config: ITabularConfig;\r\n  protected _searchTerm: string;\r\n\r\n  /**\r\n   * Order by used by orderBy service\r\n   * @example *ngFor=\"#person of people | orderBy : ['-age', 'firstName']\"\r\n   * @example *ngFor=\"#person of people | orderBy : ['+age', 'firstName']\"\r\n   */\r\n  public orderBy: Array<string> = this.defaultOrderBy;\r\n\r\n\r\n  public constructor(private conf: TabularConfig,\r\n                     private orderByService: TabularOrderByService) {\r\n    Object.assign(this, conf);\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngDoCheck() {\r\n    this.setPage();\r\n  }\r\n\r\n  private get iconDirection(): string{\r\n    return (this.defaultOrderByDirection === OrderByDirection.Ascending) ? 'icon-sort-asc' : 'icon-sort-desc';\r\n  }\r\n\r\n  /**\r\n   * Calls the parsed callback with optional arguments\r\n   * @param event\r\n   * @param cb\r\n   * @returns {boolean}\r\n   */\r\n  private executeCallback(event: Event, cb: any[]) {\r\n    if (cb.length) {\r\n      if (cb.length === 1) { // if callback has no arguments\r\n        cb[0]();\r\n      } else { // if callback has 1 or more arguments\r\n        const args: any[] = [];\r\n        for (let i = 1; i < cb.length; i++) {\r\n          args.push(cb[i]);\r\n        }\r\n        cb[0].apply(this, args);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  private toggleSelectAll = () => {\r\n    for (let i = 0; i < this.rows.length; i++) {\r\n      this.rows[i].selected = this.selectAll;\r\n    }\r\n  }\r\n\r\n\r\n  private toggleIndividualSelect = () => {\r\n    let count = 0;\r\n    for (let i = 0; i < this.rows.length; i++) {\r\n      if (this.rows[i].selected) {\r\n        count++;\r\n      }\r\n    }\r\n    this.selectAll = (this.rows.length === count);\r\n  }\r\n\r\n\r\n  setPage($event: {page: number, itemsPerPage: number} = {\r\n    page: this.config.pagination.currentPage,\r\n    itemsPerPage: this.config.pagination.itemsPerPage\r\n  }) {\r\n    this.config.pagination.currentPage = $event.page;\r\n\r\n    // calculate start and end page item indexes\r\n    const startIndex: number = (this.config.pagination.currentPage - 1) * this.config.pagination.itemsPerPage;\r\n    const endIndex: number = Math.min(startIndex + this.config.pagination.itemsPerPage - 1, this.totalItemCount - 1);\r\n\r\n    this.pagedItems = this.rows.slice(startIndex, endIndex + 1);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the action tooltip if it exists\r\n   * @param action\r\n   * @returns {string}\r\n     */\r\n  private getActionTooltip(action: IActionsConfig): string{\r\n    return (action && action.disabledConfig) ? action.disabledConfig.tooltip : '';\r\n  }\r\n\r\n\r\n  private getActionDisabledState(action: IActionsConfig): boolean {\r\n    return (action && action.disabledConfig) ? action.disabledConfig.disabled : false;\r\n  }\r\n\r\n\r\n  /**\r\n   * Handles the column header click event.\r\n   * @param key\r\n   */\r\n  private onSortClickHandler(key: string) {\r\n    this.orderBy = ([key] === this.orderBy) ? this.defaultOrderBy : [key];\r\n    this.orderByData();\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Order collection via full collection and not via pipe.\r\n   * The pagination pipe will only return the paginated amount.\r\n   * Which means the order by filter will only be applied to whats paginated\r\n   * and not the full collection.\r\n   */\r\n  private orderByData() {\r\n    let direction: string;\r\n    if (this.defaultOrderByDirection === OrderByDirection.Ascending) {\r\n      direction = '-';\r\n      this.defaultOrderByDirection = OrderByDirection.Descending;\r\n    } else {\r\n      direction = '+';\r\n      this.defaultOrderByDirection = OrderByDirection.Ascending;\r\n    }\r\n\r\n    this.orderByService.doTransform(this.rows, [direction + this.orderBy[0]]);\r\n    this.setPage();\r\n  }\r\n\r\n\r\n  get totalItemCount(): number{\r\n    return this.rows.length;\r\n  }\r\n\r\n\r\n  /**\r\n   * Helper to determine if tabular instance is in small mode\r\n   * @returns {boolean}\r\n   */\r\n  private isSmall(): boolean {\r\n    return (this.config.size === TabularSize.Small);\r\n  }\r\n\r\n}\r\n"]}