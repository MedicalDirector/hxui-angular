{"version":3,"file":"tabular.component.js","sourceRoot":"","sources":["../../tabular/tabular.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component, Input, Output, EventEmitter, OnInit, DoCheck\n} from '@angular/core';\nimport {TabularColumn} from './tabular';\nimport {ITabularConfig} from './tabular-config.interface';\nimport {IActionsConfig} from './actions-config.interface';\nimport {TabularOrderByService, OrderByDirection} from './tabular-order-by.service';\nimport {TabularConfig} from './tabular.config';\nimport {TabularSize} from './tabular-size.enum';\n\n\n@Component({\n  selector: 'hx-tabular',\n  templateUrl: './tabular.tpl.html',\n  styles: [\n    '.tabular__sorter{position:relative;cursor:pointer} th .icon{position: absolute;}',\n    '.tabular__checkboxes{width:2%;}',\n    '.tabular__checkboxes .hx-checkbox-control{margin:0;display:flex;}'\n  ]\n})\n\n\nexport class TabularComponent implements OnInit, DoCheck {\n\n  /**\n   * Collection of column models\n   */\n  @Input() columns: Array<TabularColumn>;\n\n  /**\n   * Collection of data rows\n   */\n  // todo - this is not strict. should it be when it's dynamic?.\n   @Input() rows: Array<any>;\n\n\n  /**\n   * Tabular configuration\n   * IPaginationInstance, ISearchConfig\n   */\n  @Input()\n  public get config(): ITabularConfig  {\n    return this._config;\n  }\n  public set config(c: ITabularConfig)  {\n    this._config = c;\n  }\n\n  /** The function to call when a action item is clicked **/\n  @Input()\n  public get callback(): Function{\n    return this._callback;\n  }\n  public set callback(Fn: Function){\n    this._callback = Fn;\n  }\n\n  /**\n   * Search term is used in the simple search pipe\n   * Array of objects: *ngFor=\"#row of rows | simpleSearch : 'the search term'\"\n   */\n  @Input()\n  public get searchTerm(): string{\n    return this._searchTerm;\n  }\n  public set searchTerm(term: string){\n    this._searchTerm = term;\n  }\n\n  /**\n   * Event fired when refresh is called.\n   * Host should refresh data of input.\n   * @type {EventEmitter<any>}\n   */\n  @Output() refresh: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n\n  private defaultOrderBy: Array<string> = ['id'];\n  private defaultOrderByDirection: OrderByDirection;\n  pagedItems: any[];\n  private selectAll = false;\n  protected _callback: Function;\n  protected _config: ITabularConfig;\n  protected _searchTerm: string;\n\n  /**\n   * Order by used by orderBy service\n   * @example *ngFor=\"#person of people | orderBy : ['-age', 'firstName']\"\n   * @example *ngFor=\"#person of people | orderBy : ['+age', 'firstName']\"\n   */\n  public orderBy: Array<string> = this.defaultOrderBy;\n\n\n  public constructor(private conf: TabularConfig,\n                     private orderByService: TabularOrderByService) {\n    Object.assign(this, conf);\n  }\n\n  ngOnInit() {\n  }\n\n  ngDoCheck() {\n    this.setPage();\n  }\n\n  private get iconDirection(): string{\n    return (this.defaultOrderByDirection === OrderByDirection.Ascending) ? 'icon-sort-asc' : 'icon-sort-desc';\n  }\n\n  /**\n   * Calls the parsed callback with optional arguments\n   * @param event\n   * @param cb\n   * @returns {boolean}\n   */\n  private executeCallback(event: Event, cb: any[]) {\n    if (cb.length) {\n      if (cb.length === 1) { // if callback has no arguments\n        cb[0]();\n      } else { // if callback has 1 or more arguments\n        const args: any[] = [];\n        for (let i = 1; i < cb.length; i++) {\n          args.push(cb[i]);\n        }\n        cb[0].apply(this, args);\n      }\n    }\n    return false;\n  }\n\n\n  private toggleSelectAll = () => {\n    for (let i = 0; i < this.rows.length; i++) {\n      this.rows[i].selected = this.selectAll;\n    }\n  }\n\n\n  private toggleIndividualSelect = () => {\n    let count = 0;\n    for (let i = 0; i < this.rows.length; i++) {\n      if (this.rows[i].selected) {\n        count++;\n      }\n    }\n    this.selectAll = (this.rows.length === count);\n  }\n\n\n  setPage($event: {page: number, itemsPerPage: number} = {\n    page: this.config.pagination.currentPage,\n    itemsPerPage: this.config.pagination.itemsPerPage\n  }) {\n    this.config.pagination.currentPage = $event.page;\n\n    // calculate start and end page item indexes\n    const startIndex: number = (this.config.pagination.currentPage - 1) * this.config.pagination.itemsPerPage;\n    const endIndex: number = Math.min(startIndex + this.config.pagination.itemsPerPage - 1, this.totalItemCount - 1);\n\n    this.pagedItems = this.rows.slice(startIndex, endIndex + 1);\n  }\n\n\n  /**\n   * Get the action tooltip if it exists\n   * @param action\n   * @returns {string}\n     */\n  private getActionTooltip(action: IActionsConfig): string{\n    return (action && action.disabledConfig) ? action.disabledConfig.tooltip : '';\n  }\n\n\n  private getActionDisabledState(action: IActionsConfig): boolean {\n    return (action && action.disabledConfig) ? action.disabledConfig.disabled : false;\n  }\n\n\n  /**\n   * Handles the column header click event.\n   * @param key\n   */\n  private onSortClickHandler(key: string) {\n    this.orderBy = ([key] === this.orderBy) ? this.defaultOrderBy : [key];\n    this.orderByData();\n  }\n\n\n\n  /**\n   * Order collection via full collection and not via pipe.\n   * The pagination pipe will only return the paginated amount.\n   * Which means the order by filter will only be applied to whats paginated\n   * and not the full collection.\n   */\n  private orderByData() {\n    let direction: string;\n    if (this.defaultOrderByDirection === OrderByDirection.Ascending) {\n      direction = '-';\n      this.defaultOrderByDirection = OrderByDirection.Descending;\n    } else {\n      direction = '+';\n      this.defaultOrderByDirection = OrderByDirection.Ascending;\n    }\n\n    this.orderByService.doTransform(this.rows, [direction + this.orderBy[0]]);\n    this.setPage();\n  }\n\n\n  get totalItemCount(): number{\n    return this.rows.length;\n  }\n\n\n  /**\n   * Helper to determine if tabular instance is in small mode\n   * @returns {boolean}\n   */\n  private isSmall(): boolean {\n    return (this.config.size === TabularSize.Small);\n  }\n\n}\n"]}