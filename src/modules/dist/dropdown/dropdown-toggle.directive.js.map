{"version":3,"file":"dropdown-toggle.directive.js","sourceRoot":"","sources":["../../dropdown/dropdown-toggle.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,SAAS,EAAE,SAAS,EACvE,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AAEjD,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;;IAuD/C,iCAAoB,MAAqB,EACrB,QAAoB,EACpB,SAAoB;QAFxC,iBAUC;QAVmB,WAAM,GAAN,MAAM,CAAe;QACrB,aAAQ,GAAR,QAAQ,CAAY;QACpB,cAAS,GAAT,SAAS,CAAW;8BAJC,EAAE;;QAMzC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM;aACjC,YAAY,CAAC,SAAS,CAAC,UAAC,KAAc,IAAK,OAAA,KAAI,CAAC,MAAM,GAAG,KAAK,EAAnB,CAAmB,CAAC,CAAC,CAAC;;QAEpE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM;aACjC,gBAAgB;aAChB,SAAS,CAAC,UAAC,KAAc,IAAK,OAAA,KAAI,CAAC,UAAU,GAAG,KAAK,IAAI,KAAK,EAAhC,CAAgC,CAAC,CAAC,CAAC;KACrE;IAnDD,yCAAO,aAAC,KAAU;;QAChB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC;SACR;;QAGD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;;YAExB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;SAChC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7E,IAAM,0BAAwB,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,OAAO,EAAE;;gBAE1E,AADF,gEAAgE;gBAC9D,KAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACpC,0BAAwB,EAAE,CAAC;aAC5B,CAAC,CAAC;SAEJ;;;;;;;;;;;IAcH,uCAAK;;;;;;;;;;;QACH,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACrC;;IAiBH,6CAAW,GAAX;QACE,GAAG,CAAC,CAAc,UAAmB,EAAnB,KAAA,IAAI,CAAC,cAAc,EAAnB,cAAmB,EAAnB,IAAmB;YAAhC,IAAM,GAAG,SAAA;YACZ,GAAG,CAAC,WAAW,EAAE,CAAC;SACnB;KACF;;gBArEF,SAAS,SAAC;oBACT,QAAQ,EAAE,qCAAqC;oBAC/C,QAAQ,EAAE,oBAAoB;iBAC/B;;;;gBALQ,aAAa;gBAJT,UAAU;gBAAwC,SAAS;;;+BAWrE,WAAW,SAAC,eAAe;2BAG3B,WAAW,SAAC,iBAAiB,cAC7B,WAAW,SAAC,oBAAoB;4BAEhC,YAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;0BAiChC,YAAY,SAAC,WAAW;;kCAnD3B;;SAWa,uBAAuB","sourcesContent":["import {\r\n  Directive, ElementRef, HostBinding, HostListener, OnDestroy, Renderer2\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\nimport { DropdownState } from './dropdown.state';\r\n\r\n@Directive({\r\n  selector: '[hxDropdownToggle],[dropdownToggle]',\r\n  exportAs: 'hx-dropdown-toggle'\r\n})\r\nexport class DropdownToggleDirective implements OnDestroy {\r\n  @HostBinding('attr.disabled')\r\n  isDisabled: boolean;\r\n\r\n  @HostBinding('class.is-active')\r\n  @HostBinding('attr.aria-expanded') isOpen: boolean;\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: any): void {\r\n    event.stopPropagation();\r\n    if (this.isDisabled) {\r\n      return;\r\n    }\r\n\r\n    // console.log(this._state.isOpen);\r\n    if (!this._state.isOpen) {\r\n     // console.log('click to open');\r\n      this._state.toggleClick.emit();\r\n    }\r\n\r\n    if (this._state.isOpen || this._element.nativeElement.contains(event.target)) {\r\n      const removeRegisteredListener = this._renderer.listen('document', 'click', () => {\r\n      //  console.log('the document was clicked', this._state.isOpen);\r\n        this._state.toggleClick.emit(false);\r\n        removeRegisteredListener();\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  // Performance issue with multiple document listeners\r\n  /*@HostListener('document:click', ['$event'])\r\n  onDocumentClick(event: any): void {\r\n    if (this._state.autoClose && event.button !== 2 &&\r\n      !this._element.nativeElement.contains(event.target)) {\r\n      console.log('document:click');\r\n      this._state.toggleClick.emit(false);\r\n    }\r\n  }*/\r\n\r\n  @HostListener('keyup.esc')\r\n  onEsc(): void {\r\n    if (this._state.autoClose) {\r\n      this._state.toggleClick.emit(false);\r\n    }\r\n  }\r\n\r\n  private _subscriptions: Subscription[] = [];\r\n\r\n  constructor(private _state: DropdownState,\r\n              private _element: ElementRef,\r\n              private _renderer: Renderer2) {\r\n    // sync is open value with state\r\n    this._subscriptions.push(this._state\r\n      .isOpenChange.subscribe((value: boolean) => this.isOpen = value));\r\n    // populate disabled state\r\n    this._subscriptions.push(this._state\r\n      .isDisabledChange\r\n      .subscribe((value: boolean) => this.isDisabled = value || false));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    for (const sub of this._subscriptions) {\r\n      sub.unsubscribe();\r\n    }\r\n  }\r\n}\r\n"]}