{"version":3,"file":"typeahead-utils.js","sourceRoot":"","sources":["../../typeahead/typeahead-utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAEvC,MAAM,mBAAmB,GAAW;IAClC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACT,MAAM,CAAC,EAAE,CAAC;KACX;IACD,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,oBAAoB,EAAE,UAAU,CAAS;QAC1D,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;KACzB,CAAC,CAAC;CACJ;AAED,MAAM,uBAAuB,aAAqB;;;;IAIhD,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,wBAAwB,EAAE,MAAM,CAAC,CAAC;CAChE;;AAGD,MAAM,mBAAmB,GAAW,EAAE,mBAAyB,EAAE,qBAA0B;IAArD,oCAAA,EAAA,yBAAyB;IAAE,sCAAA,EAAA,0BAA0B;;IAEzF,IAAM,QAAQ,GAAW,MAAM,GAAG,qBAAqB,GAAG,OAAO,GAAG,qBAAqB,GAAG,SAAS,GAAG,qBAAqB,GAAG,QAAQ,GAAG,mBAAmB,GAAG,KAAK,CAAC;IACvK,IAAM,YAAY,GAAa,GAAG,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;IACpE,IAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,IAAM,kBAAkB,GAAW,YAAY,CAAC,MAAM,CAAC;IACvD,IAAI,KAAa,CAAC;IAClB,IAAM,uBAAuB,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,qBAAqB,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC;IAEpF,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,kBAAkB,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;QAC/C,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;QACxB,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,IAAI,KAAK,KAAK,mBAAmB,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC,CAAC;SACzD;KACF;IAED,MAAM,CAAC,MAAM,CAAC;CACf;AAED,MAAM,6BAA6B,MAAW,EAAE,MAAc;IAC5D,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;KAC1B;IAED,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1B,IAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACxD,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;KAC1C;IAED,IAAM,UAAU,GAAW,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC;SAC3D,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IACtB,IAAM,eAAe,GAAa,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAExD,GAAG,CAAC,CAAmB,UAAe,EAAf,mCAAe,EAAf,6BAAe,EAAf,IAAe;QAAjC,IAAM,QAAQ,wBAAA;QACjB,EAAE,CAAC,CAAC,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC;YACvB,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;SAC3B;KACF;IACD,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;CAC1B","sourcesContent":["import { latinMap } from './latin-map';\n\nexport function latinize(str: string): string {\n  if (!str) {\n    return '';\n  }\n  return str.replace(/[^A-Za-z0-9\\[\\] ]/g, function (a: string): string {\n    return latinMap[a] || a;\n  });\n}\n\nexport function escapeRegexp(queryToEscape: string): string {\n  // Regex: capture the whole query string and replace it with the string\n  // that will be used to match the results, for example if the capture is\n  // 'a' the result will be \\a\n  return queryToEscape.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n}\n\n/* tslint:disable */\nexport function tokenize(str: string, wordRegexDelimiters = ' ', phraseRegexDelimiters = ''): Array<string> {\n  /* tslint:enable */\n  const regexStr: string = '(?:[' + phraseRegexDelimiters + '])([^' + phraseRegexDelimiters + ']+)(?:[' + phraseRegexDelimiters + '])|([^' + wordRegexDelimiters + ']+)';\n  const preTokenized: string[] = str.split(new RegExp(regexStr, 'g'));\n  const result: string[] = [];\n  const preTokenizedLength: number = preTokenized.length;\n  let token: string;\n  const replacePhraseDelimiters = new RegExp('[' + phraseRegexDelimiters + ']+', 'g');\n\n  for (let i = 0; i < preTokenizedLength; i += 1) {\n    token = preTokenized[i];\n    if (token && token.length && token !== wordRegexDelimiters) {\n      result.push(token.replace(replacePhraseDelimiters, ''));\n    }\n  }\n\n  return result;\n}\n\nexport function getValueFromObject(object: any, option: string): string {\n  if (!option || typeof object !== 'object') {\n    return object.toString();\n  }\n\n  if (option.endsWith('()')) {\n    const functionName = option.slice(0, option.length - 2);\n    return object[functionName]().toString();\n  }\n\n  const properties: string = option.replace(/\\[(\\w+)\\]/g, '.$1')\n    .replace(/^\\./, '');\n  const propertiesArray: string[] = properties.split('.');\n\n  for (const property of propertiesArray) {\n    if (property in object) {\n      object = object[property];\n    }\n  }\n  return object.toString();\n}\n"]}